// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BBBankContext))]
    [Migration("20250202100802_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            AccountNumber = "0001-1001",
                            AccountStatus = 0,
                            AccountTitle = "Raas Masood",
                            CurrentBalance = 3500m,
                            UserId = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3"
                        },
                        new
                        {
                            Id = "2f115781-c0d2-4f98-a70b-0bc4ed01d780",
                            AccountNumber = "0002-2002",
                            AccountStatus = 0,
                            AccountTitle = "Salman Taj",
                            CurrentBalance = 545m,
                            UserId = "c651e237-102a-4de1-8c5a-d41c94079ff0"
                        });
                });

            modelBuilder.Entity("Entites.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = "28c51fa0-f0ec-4b74-b4f6-da8d5cbeeed6",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 3000m,
                            TransactionDate = new DateTime(2025, 2, 1, 4, 8, 1, 793, DateTimeKind.Local).AddTicks(50),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "88090472-7798-4231-b4cf-fa64047a8dc6",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2024, 2, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5877),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "51792daf-628f-4304-8f0d-016f011cc391",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2023, 2, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5913),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "bf3d41ae-a020-4ac6-a309-970b76854014",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2024, 11, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5917),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "5b1bf3b8-f700-4974-bd84-c0a133ff6435",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -200m,
                            TransactionDate = new DateTime(2024, 10, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5933),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "46d0e450-6301-4d49-bf3b-d09f59e7b158",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2024, 9, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5935),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "d28816e1-bb92-4ed4-b8d9-4b24aaf0eef5",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2024, 8, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5938),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "1e3731db-c89a-4d27-8efb-09e60b72edf6",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -300m,
                            TransactionDate = new DateTime(2024, 7, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5940),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "61cf7d1b-5e5c-412e-b7d7-ca68fc04140d",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -100m,
                            TransactionDate = new DateTime(2024, 6, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5942),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "f778816e-bc02-4b62-9c61-7b76e1e5ca33",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2024, 5, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5945),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "4400c28a-a005-4786-87a5-3c7fa64c2b6d",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2024, 4, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5950),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "891ab004-d8ce-400f-8fcd-142e30ecb140",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 900m,
                            TransactionDate = new DateTime(2024, 3, 2, 4, 8, 1, 794, DateTimeKind.Local).AddTicks(5952),
                            TransactionType = 0
                        });
                });

            modelBuilder.Entity("Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3",
                            Email = "rassmasood@hotmail.com",
                            FirstName = "Raas",
                            LastName = "Masood",
                            ProfilePicUrl = "https://res.cloudinary.com/demo/image/upload/w_400,h_400,c_crop,g_face,r_max/w_200/lady.jpg"
                        },
                        new
                        {
                            Id = "c651e237-102a-4de1-8c5a-d41c94079ff0",
                            Email = "salman-dev@outlook.com",
                            FirstName = "Salman",
                            LastName = "Taj",
                            ProfilePicUrl = "https://res.cloudinary.com/demo/image/upload/w_400,h_400,c_crop,g_face,r_max/w_200/lady.jpg"
                        });
                });

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.HasOne("Entites.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Entites.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entites.Transaction", b =>
                {
                    b.HasOne("Entites.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entites.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
