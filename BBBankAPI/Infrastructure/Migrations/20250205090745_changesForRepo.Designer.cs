// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BBBankContext))]
    [Migration("20250205090745_changesForRepo")]
    partial class changesForRepo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            AccountNumber = "0001-1001",
                            AccountStatus = 0,
                            AccountTitle = "Raas Masood",
                            CurrentBalance = 3500m,
                            UserId = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3"
                        },
                        new
                        {
                            Id = "2f115781-c0d2-4f98-a70b-0bc4ed01d780",
                            AccountNumber = "0002-2002",
                            AccountStatus = 0,
                            AccountTitle = "Salman Taj",
                            CurrentBalance = 545m,
                            UserId = "c651e237-102a-4de1-8c5a-d41c94079ff0"
                        });
                });

            modelBuilder.Entity("Entites.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = "65e568f5-005f-43c2-a22b-6049c28c30e0",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 3000m,
                            TransactionDate = new DateTime(2025, 2, 4, 3, 7, 44, 691, DateTimeKind.Local).AddTicks(7852),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "f145b7c7-45e7-47f9-9cf6-919431988336",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2024, 2, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4429),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "615eaaf8-4acb-4d4a-a6b1-ecf54236bf80",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2023, 2, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4465),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "87bda3b2-832f-4ad0-b299-f11e1e5cba89",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2024, 11, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4469),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "d30e2e33-cd14-457d-923a-bf1a18430a15",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -200m,
                            TransactionDate = new DateTime(2024, 10, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4607),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "ddbbeea3-b931-4910-b3d1-e9a6f3a4310c",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 500m,
                            TransactionDate = new DateTime(2024, 9, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4611),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "9b7a36f5-218a-4a18-a1fb-b468aa70666b",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2024, 8, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4613),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "bda769d8-e8bb-46d8-8f29-bc38f92fc27f",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -300m,
                            TransactionDate = new DateTime(2024, 7, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4616),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "60f52cf1-5fcc-4111-b4da-0daf04fdc827",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -100m,
                            TransactionDate = new DateTime(2024, 6, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4618),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "d3d2e4aa-cd73-470b-980d-b9dd816b9548",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 200m,
                            TransactionDate = new DateTime(2024, 5, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4621),
                            TransactionType = 0
                        },
                        new
                        {
                            Id = "357300c6-e658-4a6e-98a3-ce5590d2be4d",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = -500m,
                            TransactionDate = new DateTime(2024, 4, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4625),
                            TransactionType = 1
                        },
                        new
                        {
                            Id = "a1594ec9-dd50-495f-99d0-fe662fbf000d",
                            AccountId = "37846734-172e-4149-8cec-6f43d1eb3f60",
                            TransactionAmount = 900m,
                            TransactionDate = new DateTime(2024, 3, 5, 3, 7, 44, 693, DateTimeKind.Local).AddTicks(4628),
                            TransactionType = 0
                        });
                });

            modelBuilder.Entity("Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "aa45e3c9-261d-41fe-a1b0-5b4dcf79cfd3",
                            Email = "rassmasood@hotmail.com",
                            FirstName = "Raas",
                            LastName = "Masood",
                            ProfilePicUrl = "https://res.cloudinary.com/demo/image/upload/w_400,h_400,c_crop,g_face,r_max/w_200/lady.jpg"
                        },
                        new
                        {
                            Id = "c651e237-102a-4de1-8c5a-d41c94079ff0",
                            Email = "salman-dev@outlook.com",
                            FirstName = "Salman",
                            LastName = "Taj",
                            ProfilePicUrl = "https://res.cloudinary.com/demo/image/upload/w_400,h_400,c_crop,g_face,r_max/w_200/lady.jpg"
                        });
                });

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.HasOne("Entites.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Entites.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entites.Transaction", b =>
                {
                    b.HasOne("Entites.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entites.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entites.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
